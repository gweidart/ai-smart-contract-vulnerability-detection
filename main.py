from data_loader import load_dataset
from feature_extractor import preprocess_data
from model_trainer import train_and_evaluate_model, save_model
from rich_utils import add_debug_message, debug_table
from rich.live import Live

def main():
    dataset_dir = './datast'
    
    with Live(debug_table, refresh_per_second=4):
        # Load the dataset
        data, labels = load_dataset(dataset_dir)
        
        # Check the lengths of data and labels
        add_debug_message(f"Number of data samples: {len(data)}")
        add_debug_message(f"Number of label samples: {len(labels)}")
        
        # Preprocess the data
        X_train, X_test, y_train, y_test = preprocess_data(data, labels)
        
        # Print shapes of the preprocessed data
        if X_train is not None and X_test is not None and y_train is not None and y_test is not None:
            add_debug_message(f"X_train shape: {X_train.shape}")
            add_debug_message(f"X_test shape: {X_test.shape}")
            add_debug_message(f"y_train shape: {y_train.shape}")
            add_debug_message(f"y_test shape: {y_test.shape}")
        else:
            add_debug_message("[bold red]Preprocessing failed. One or more variables are None.")
        
        # Train and evaluate the model
        model = train_and_evaluate_model(X_train, X_test, y_train, y_test)
        
        # Save the model
        if model:
            save_model(model)

if __name__ == "__main__":
    main()
