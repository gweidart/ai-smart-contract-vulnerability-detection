# main.py

from gnn_model import create_gnn_model
from gnn_data_loader import load_gnn_dataset
from train_gnn import train_and_evaluate_gnn
from lstm_model import create_lstm_model
from lstm_data_loader import load_lstm_dataset
from train_lstm import train_and_evaluate_lstm
from data_loader import load_dataset
from feature_extractor import preprocess_data
from model_trainer import train_and_evaluate_model, save_model
from rich_utils import add_debug_message, debug_table
from rich.live import Live

def main():
    dataset_dir = './datast'

    with Live(debug_table, refresh_per_second=4):
        # GNN Data Loading
        add_debug_message("[bold yellow]Loading GNN dataset...")
        train_loader_gnn = load_gnn_dataset(batch_size=32)
        test_loader_gnn = load_gnn_dataset(batch_size=32)
        
        # Initialize GNN model
        add_debug_message("[bold yellow]Initializing GNN model...")
        num_features = train_loader_gnn.dataset.num_features
        hidden_channels = 64
        num_classes = train_loader_gnn.dataset.num_classes
        
        gnn_model = create_gnn_model(num_features, hidden_channels, num_classes)
        
        # Train and evaluate the GNN model
        add_debug_message("[bold yellow]Training and evaluating GNN model...")
        gnn_model = train_and_evaluate_gnn(gnn_model, train_loader_gnn, test_loader_gnn)
        
        # Save the GNN model
        if gnn_model:
            save_model(gnn_model)

        # LSTM Data Loading
        add_debug_message("[bold yellow]Loading LSTM dataset...")
        train_loader_lstm = load_lstm_dataset(dataset_dir, batch_size=32)
        test_loader_lstm = load_lstm_dataset(dataset_dir, batch_size=32)
        
        # Initialize LSTM model
        add_debug_message("[bold yellow]Initializing LSTM model...")
        input_size = train_loader_lstm.dataset[0][0].shape[0]
        hidden_size = 128
        num_layers = 2
        num_classes = len(set(train_loader_lstm.dataset.labels))
        
        lstm_model = create_lstm_model(input_size, hidden_size, num_layers, num_classes)
        
        # Train and evaluate the LSTM model
        add_debug_message("[bold yellow]Training and evaluating LSTM model...")
        lstm_model = train_and_evaluate_lstm(lstm_model, train_loader_lstm, test_loader_lstm)
        
        # Save the LSTM model
        if lstm_model:
            save_model(lstm_model)

if __name__ == "__main__":
    main()

