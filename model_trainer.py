# model_trainer.py

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from rich_utils import add_debug_message
from model_utils import save_model  # Import save_model function

def train_and_evaluate_model(X_train, X_test, y_train, y_test, live=None):
    try:
        add_debug_message("[bold yellow]Training the model...")
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        add_debug_message("[bold yellow]Evaluating the model...")
        y_pred = model.predict(X_test)
        
        # Generate the classification report with zero_division parameter
        report = classification_report(y_test, y_pred, zero_division=1)
        add_debug_message(f"[bold green]Classification Report:\n{report}")
        
        save_model(model, model_name='random_forest_model')  # Save the model
        return model
    except Exception as e:
        add_debug_message(f"[bold red]Error training or evaluating the model: {e}")
        return None
