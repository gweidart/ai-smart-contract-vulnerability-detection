import re

patterns = {
    'timestamp_dependence': re.compile(r'\bblock\.timestamp\b'),
    'CALLValueInvocation': re.compile(r'\bcall\.value\b'),
    'RepeatedCallValue': re.compile(r'\bcall\.value\b.*\btransfer\b|\bsend\b'),
    'access_control_violation': re.compile(r'\bmsg\.sender\b.*\bowner\b'),
    'TSInvocation': re.compile(r'\bblock\.timestamp\b'),
    'TSContaminate': re.compile(r'\bblock\.timestamp\b.*\bJUMPI\b|\bLT\b|\bGT\b|\bEQ\b'),
    'TSRandom': re.compile(r'\bblock\.timestamp\b.*\brandom\b'),
    'BNInvocation': re.compile(r'\bblock\.number\b'),
    'BNContaminate': re.compile(r'\bblock\.number\b.*\bJUMPI\b|\bLT\b|\bGT\b|\bEQ\b'),
    'EDInvocation': re.compile(r'\bthis\.balance\b'),
    'EDContaminate': re.compile(r'\bthis\.balance\b.*\bJUMPI\b|\bLT\b|\bGT\b|\bEQ\b'),
    'OFStackTruncate': re.compile(r'\badd\b|\bmul\b|\bsub\b'),
    'SafeMathUsage': re.compile(r'\bSafeMath\b'),
    'ExternalCall': re.compile(r'\bcall\b|\bdelegatecall\b|\bcallcode\b'),
    'ExceptionConsistency': re.compile(r'\binvalid\b'),
    'ReturnCondition': re.compile(r'\bif\b|\brequire\b|\bassert\b'),
    'DGInvocation': re.compile(r'\bdelegatecall\b'),
    'FETransfer': re.compile(r'\bcall\b|\bcallcode\b|\bsuicide\b|\bselfdestruct\b'),
    'DGCallConstraint': re.compile(r'\bmodifier\b|\brequire\b|\bassert\b'),
    'DGParameter': re.compile(r'\bdelegatecall\b.*\b\('),
    'MissingModifier': re.compile(r'\bfunction\b.*\bpublic\b|\bexternal\b'),
    'IncorrectStorageInitialization': re.compile(r'\buint\b|\baddress\b|\bbool\b'),
    'ConstructorInitialization': re.compile(r'\bconstructor\b'),
    'DDoSVulnerability': re.compile(r'\bfor\b|\bwhile\b'),
    'GasLimitCheck': re.compile(r'\bgasleft\b'),
    'ExternalCallInLoop': re.compile(r'\bfor\b|\bwhile\b.*\bcall\b|\bdelegatecall\b'),
    'TransactionOrderingDependence': re.compile(r'\bblock\.number\b|\bblock\.timestamp\b'),
    'RandomnessSource': re.compile(r'\bblock\.difficulty\b|\bblock\.hash\b'),
    'LackOfRandomness': re.compile(r'\bblock\.timestamp\b|\bblock\.number\b|\bblock\.difficulty\b'),
    'SecureRandomness': re.compile(r'\bChainlinkVRF\b'),
    'ERC20APIViolation': re.compile(r'\btransfer\b|\btransferFrom\b|\bapprove\b'),
    'EventEmission': re.compile(r'\bemit\b.*\bTransfer\b|\bApproval\b'),
    'SignaturesReplay': re.compile(r'\becrecover\b'),
    'NonceUsage': re.compile(r'\bnonce\b'),
    'SignatureVerification': re.compile(r'\bkeccak256\b')
}
