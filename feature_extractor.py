from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MultiLabelBinarizer
from rich_utils import add_debug_message, create_progress_bar

def preprocess_data(data, labels, live=None):
    try:
        add_debug_message("[bold yellow]Preprocessing data...")
        with create_progress_bar() as progress:
            task = progress.add_task("Preprocessing...", total=100)
            
            # Split the data into training and testing sets
            X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)
            progress.update(task, advance=50)  # Update progress bar to 50% after splitting data

            # Initialize the TF-IDF vectorizer
            vectorizer = TfidfVectorizer(max_features=1000)

            # Fit the vectorizer on the training data and transform both training and testing data
            X_train_tfidf = vectorizer.fit_transform(X_train)
            X_test_tfidf = vectorizer.transform(X_test)
            progress.update(task, advance=30)  # Update progress bar to 80% after feature extraction

            # Binarize the labels for multi-label classification
            mlb = MultiLabelBinarizer()
            y_train_bin = mlb.fit_transform(y_train)
            y_test_bin = mlb.transform(y_test)

            # Print shapes after preprocessing
            add_debug_message(f"[bold green]X_train_tfidf shape: {X_train_tfidf.shape}")
            add_debug_message(f"[bold green]y_train_bin shape: {y_train_bin.shape}")
            
            progress.update(task, advance=20)  # Update progress bar to 100% after preprocessing

        add_debug_message("[bold green]Data preprocessed successfully.")
        return X_train_tfidf, X_test_tfidf, y_train_bin, y_test_bin
    except Exception as e:
        add_debug_message(f"[bold red]Error preprocessing data: {e}")
        return None, None, None, None
