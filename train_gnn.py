# train_gnn.py

import torch
from torch.nn import CrossEntropyLoss
from torch.optim import Adam
from rich_utils import add_debug_message
from model_utils import save_model

def train_and_evaluate_gnn(model, train_loader, test_loader, num_epochs=10):
    criterion = CrossEntropyLoss()
    optimizer = Adam(model.parameters(), lr=0.001)

    try:
        for epoch in range(num_epochs):
            model.train()
            for data in train_loader:
                try:
                    optimizer.zero_grad()
                    out = model(data)
                    loss = criterion(out, data.y)
                    loss.backward()
                    optimizer.step()
                except Exception as e:
                    add_debug_message(f"[bold red]Error during training at epoch {epoch + 1}: {e}")
            
            add_debug_message(f"Epoch {epoch + 1}/{num_epochs} - Loss: {loss.item()}")
            
            model.eval()
            correct = 0
            try:
                for data in test_loader:
                    out = model(data)
                    pred = out.argmax(dim=1)
                    correct += pred.eq(data.y).sum().item()
                
                accuracy = correct / len(test_loader.dataset)
                add_debug_message(f"Accuracy: {accuracy}")
            except Exception as e:
                add_debug_message(f"[bold red]Error during evaluation at epoch {epoch + 1}: {e}")

        save_model(model, model_name='gnn_model')
    except Exception as e:
        add_debug_message(f"[bold red]Error in train_and_evaluate_gnn: {e}")
    
    return model
