# gnn_model.py

import torch
import torch.nn.functional as F
from torch_geometric.nn import GCNConv
from rich_utils import add_debug_message

class GNNModel(torch.nn.Module):
    def __init__(self, num_features, hidden_channels, num_classes):
        try:
            super(GNNModel, self).__init__()
            self.conv1 = GCNConv(num_features, hidden_channels)
            self.conv2 = GCNConv(hidden_channels, hidden_channels)
            self.linear = torch.nn.Linear(hidden_channels, num_classes)
        except Exception as e:
            add_debug_message(f"[bold red]Error initializing GNNModel: {e}")

    def forward(self, data):
        try:
            x, edge_index = data.x, data.edge_index
            x = self.conv1(x, edge_index)
            x = F.relu(x)
            x = self.conv2(x, edge_index)
            x = F.relu(x)
            x = self.linear(x)
            return F.log_softmax(x, dim=1)
        except Exception as e:
            add_debug_message(f"[bold red]Error in GNNModel forward pass: {e}")
            return None

def create_gnn_model(num_features, hidden_channels, num_classes):
    try:
        model = GNNModel(num_features, hidden_channels, num_classes)
        return model
    except Exception as e:
        add_debug_message(f"[bold red]Error creating GNN model: {e}")
        return None
