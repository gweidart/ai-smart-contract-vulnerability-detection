# lstm_model.py

import torch
import torch.nn as nn
from rich_utils import add_debug_message

class LSTMModel(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, num_classes):
        try:
            super(LSTMModel, self).__init__()
            self.hidden_size = hidden_size
            self.num_layers = num_layers
            self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
            self.fc = nn.Linear(hidden_size, num_classes)
        except Exception as e:
            add_debug_message(f"[bold red]Error initializing LSTMModel: {e}")

    def forward(self, x):
        try:
            h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size).to(x.device)
            c0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size).to(x.device)

            out, _ = self.lstm(x, (h0, c0))
            out = out[:, -1, :]
            out = self.fc(out)
            return out
        except Exception as e:
            add_debug_message(f"[bold red]Error in LSTMModel forward pass: {e}")
            return None

def create_lstm_model(input_size, hidden_size, num_layers, num_classes):
    try:
        model = LSTMModel(input_size, hidden_size, num_layers, num_classes)
        return model
    except Exception as e:
        add_debug_message(f"[bold red]Error creating LSTM model: {e}")
        return None
